#!/usr/bin/env bash

USAGE="Usage: generate_credentials -l <user list> [-o <outdir>] \n
\n
This command generates credentials for users\n
\n
-l  tab-delimited list of users, with 5 columns: first name, last name, e-mail, instance name, instance IP. Required. \n
-o  output directory. Will be created if doesn't exist. Default: .\n"

while getopts ":l:o:" opt
do
  case $opt in
    l)
      LIST=$OPTARG
      ;;
    o)
      OUTDIR=$OPTARG
      ;;
    \?)
      echo -e "Invalid option: -$OPTARG \n" >&2
      echo -e $USAGE >&2
      exit 1
      ;;
    :)
      echo -e "Option -$OPTARG requires an argument. \n"
      echo -e $USAGE >&2
      exit 1
      ;;
  esac
done

# return usage if no options are passed
if [ $OPTIND -eq 1 ]
then
  echo -e "No options were passed. \n" >&2
  echo -e $USAGE >&2
  exit 1
fi

# required options
if [ "$LIST" == "" ]; then echo "option -l is missing, but required">&2 && exit 1; fi

# default values
if [ "$OUTDIR" == "" ]; then OUTDIR=.; fi


# get script source directory to not break secondary script dependencies
SOURCEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# generate output directories
for dir in private_keys public_keys emails passwords users
do
  mkdir -p $OUTDIR/$dir
done

# removing carriage returns and spaces
cat $LIST | tr -d '\015\040' > $OUTDIR/users/user_list.txt

L1=`cat $LIST | wc -l`
L2=`cat $OUTDIR/users/user_list.txt | wc -l`

if [ $L1 != $L2 ]
then
  echo "Check returns of user list. This software is incompatible with carriage returns.">&2
  exit 1
fi

LIST=$OUTDIR/users/user_list.txt

# check if end of file new line exists
# and add it if not
cat $LIST | tail -c1 | read -r _ || echo >> $LIST

# get instance names from user list
INSTANCE_NAMES=`cut -f 4 $LIST | sort | uniq`

for NAME in $INSTANCE_NAMES
do
  FIRSTL=`grep "$NAME" "$LIST" | cut -f 1 | tr -cd '\11\12\15\40-\176' | tr [:upper:] [:lower:] | cut -c-1`
  LASTN=`grep "$NAME" "$LIST" | cut -f 2 | tr -cd '\11\12\15\40-\176' | tr [:upper:] [:lower:]`

  USERNAMES=$(paste -d '-' <(echo "$FIRSTL") <(echo "$LASTN") | tr -d '-')

  # generate empty password file
  if [ -f $OUTDIR/passwords/passwords_"$NAME".txt ]
  then
    rm $OUTDIR/passwords/passwords_"$NAME".txt
    touch $OUTDIR/passwords/passwords_"$NAME".txt
  fi

  IP=`cut -f 4,5 $LIST | grep $NAME | cut -f 2 | sort | uniq`

  NUM=`echo $IP | wc -w`

  if [$NUM != 1 ]
  then
    echo "Check each instance ID has a single IP" 2>&1
    exit 1
  fi

  for user in $USERNAMES
  do
    aws ec2 describe-key-pairs | grep key_$user > /dev/null

    if [ $? == 0 ]
    then
      echo "Key for '$user' is already generated. No new key, password or mail generated for '$user'." >&2
    else
      password=`openssl rand -base64 14`
      echo -e $user"\t"$password >> $OUTDIR/passwords/passwords_"$NAME".txt
      $SOURCEDIR/scripts/generate_mail.sh $user $password $IP > $OUTDIR/emails/mail_$user.txt
      $SOURCEDIR/scripts/generate_keys.sh $user $OUTDIR/private_keys $OUTDIR/public_keys
    fi
  done
done
