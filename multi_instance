#!/usr/bin/env bash

set -e

USAGE="Usage: multi_instance -a <AMI id> -s <security group>  -k <key name> -p <key_file.pem> [-o <outdir>] [-t <type>] [-b <disk size>] [-d <storage device>]\n
\n
This command launches AWS instances based on a list of users and associated credentials generated with generate_credentials.\n
\n
-o  work directory. Should contain output of generate_credentials (emails, password, private_keys, public_keys, users). Default: .\n
-t  AWS instance type. Default: t2.micro.\n
-a  AMI id in the format ami-xxxxxx. Required. \n
-s  Security group id in the format sg-xxxxxx. Required. \n
-b  Block size of additional disk. In gigabytes. Default: 1.\n
-d  Device to mount storage to. If it is the root device, it will expand it to -b. If device is non-existent, a file-system will not be created. Default: root device \n
-k  Key pair name. Should be available for AWS. Required.\n
-p  Private key file: <my_key>.pem. Should be the private key for -k. Required.\n
-c  Bash script with command run for all users. Default: "". \n
-h  This helper.\n"

while getopts ":l:o:t:a:s:b:d:k:p:c:h" opt
do
  case $opt in
    o)
      OUTDIR=$OPTARG
      ;;
    t)
      TYPE=$OPTARG
      ;;
    a)
      AMI=$OPTARG
      ;;
    s)
      SECGROUP=$OPTARG
      ;;
    b)
      BLOCK=$OPTARG
      ;;
    d)
      DEVICE=$OPTARG
      ;;
    k)
      KEY=$OPTARG
      ;;
    p)
      PEM=$OPTARG
      ;;
    c)
      SCRIPT=$OPTARG
      ;;
    h)
      echo -e $USAGE  >&2
      exit 1
      ;;
    \?)
      echo -e "Invalid option: -$OPTARG \n" >&2
      echo -e $USAGE >&2
      exit 1
      ;;
    :)
      echo -e "Option -$OPTARG requires an argument. \n"
      echo -e $USAGE >&2
      exit 1
      ;;
  esac
done

# return usage if no options are passed
if [ $OPTIND -eq 1 ]
then
  echo -e "No options were passed. \n" >&2
  echo -e $USAGE >&2
  exit 1
fi

# required options
if [ "$AMI" == "" ]; then echo "option -a is missing, but required">&2 && exit 1; fi
if [ "$SECGROUP" == "" ]; then echo "option -s is missing, but required">&2 && exit 1; fi
if [ "$KEY" == "" ]; then echo "option -k is missing, but required">&2 && exit 1; fi
if [ "$PEM" == "" ]; then echo "option -p is missing, but required">&2 && exit 1; fi

# default values
if [ "$TYPE" == "" ]; then TYPE=t2.micro; fi
if [ "$BLOCK" == "" ]; then BLOCK=1; fi
if [ "$OUTDIR" == "" ]; then OUTDIR=.; fi
if [ "$DEVICE" == "" ]; then DEVICE="/dev/sda1"; fi

# get script source directory to not break secondary script dependencies
SOURCEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

LIST=$OUTDIR/users/user_list.txt

# get instance names from user list
INSTANCE_NAMES=`cut -f 4 $LIST | sort | uniq`

for NAME in $INSTANCE_NAMES
do
  IP=`cut -f 4,5 $LIST | grep $NAME | cut -f 2 | sort | uniq`

  NUM=`echo $IP | wc -w`

  if [ $NUM != 1 ]
  then
    echo "Check each instance ID has a single IP" >&2
    exit 1
  fi

  echo "Launching a $TYPE instance at $IP"

  # get first available allocation id:
  ALLOCID=`aws ec2 describe-addresses --public-ips $IP \
  | python3 -c "import sys, json; print(json.load(sys.stdin)['Addresses'][0]['AllocationId'])"`

  if [ $? != 0 ]
  then
    echo "The address $IP is not available. Check your elastic IPs" >&2
    exit 1
  fi

  # call launch_instance
  $SOURCEDIR/launch_instance -n $NAME -o $OUTDIR -t $TYPE -a $AMI -s $SECGROUP -b $BLOCK -d $DEVICE -e $ALLOCID -k $KEY

  # get instance ID
  INSTANCE=`cat $OUTDIR/log/"$NAME".startup.json \
  | python3 -c "import sys, json; print(json.load(sys.stdin)['Instances'][0]['InstanceId'])"`

  echo "waiting 60 seconds to start up .." >&2
  sleep 60

  # remove IP from known hosts
  # reused elastic IPs give warnings because logging in to different host with the same IP (man in the middle attack)
  ssh-keygen -R $IP

  # secure copy required keys, passwords and script to generate new users
  scp -o StrictHostKeyChecking=accept-new -i $PEM -r $OUTDIR/public_keys ubuntu@"$IP":/home/ubuntu

  # terminate if copying failed
  if [ $? != 0 ]
  then
    echo "Attempt to copy data to remote failed!" >&2
    # aws ec2 terminate-instances --instance-ids $INSTANCE

    # for user in $USERNAMES
    # do
    #   aws ec2 delete-key-pair --key-name key_$user
    # done

    exit 1

  fi

  scp -i $PEM $SOURCEDIR/scripts/add_users.sh ubuntu@"$IP":/home/ubuntu
  scp -i $PEM $OUTDIR/passwords/passwords_"$NAME".txt ubuntu@"$IP":/home/ubuntu

  # generate new users
  ssh -i $PEM ubuntu@"$IP" "sudo ./add_users.sh passwords_"$NAME".txt condausers /home/ubuntu/public_keys"

  if [ $SCRIPT != "" ]
  then
    while read user pw
    do
      BASE=`basename $SCRIPT`
      echo "Executing script for $user .." >&2
      scp -i $OUTDIR/private_keys/key_"$user".pem $SCRIPT "$user"@"$IP":/home/$user
      ssh -i $OUTDIR/private_keys/key_"$user".pem "$user"@"$IP" "bash ./$BASE; rm ./$BASE" < /dev/null
    done < $OUTDIR/passwords/passwords_"$NAME".txt
  fi

  echo "Successfully generated users" >&2
done
